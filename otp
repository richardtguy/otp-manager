#!/Users/richardguy/Developer/otp-manager/venv/bin/python

import json
import os
import sys
from base64 import urlsafe_b64encode, b32decode
import binascii
from time import time
import qrcode
from PIL.ImageQt import ImageQt
from functools import partial
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.hashes import SHA1, SHA256
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.twofactor.totp import TOTP
from cryptography.fernet import Fernet, InvalidToken
from PySide6.QtGui import QIcon, QPixmap, QImage
from PySide6.QtCore import Qt, QTimer
from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QGridLayout, QPushButton, QDialogButtonBox, QLabel,
    QInputDialog, QLineEdit, QMessageBox, QApplication
)
# TODO: import objects from QtWidgets (e.g. QDialog)

from config import KEYFILE_PATH, SALT, MASTER_KEY_PATH

base_path = os.path.dirname(__file__)

class OTPError(Exception):
    """Base class for exceptions"""
    pass

class MissingKeyFileError(OTPError):
    """Exception raised if key file is missing"""
    def __init__(self, message):
        self.message = message

class OTPModel():
    """
    OTP Manager Model
    """
    def __init__(self, master_key_path, keyfile_path, salt):
        self.keyfile_path = keyfile_path
        self.master_key_path = master_key_path
        self.salt = salt
        self._master_key = self._get_master_key()

    def _get_master_key(self, password=None):
        """
        Return saved master key if available, or use password
        """
        # Retrieve key from file if available
        if password==None:
            try:
                with open(self.master_key_path, 'rb') as f:
                    master_key = f.read()
                    # Or get from user input
            except FileNotFoundError:
                return None
            return master_key
        else:
            kdf = PBKDF2HMAC(
                algorithm=SHA256(),
                length=32,
                salt=self.salt,
                iterations=100000,
                backend=default_backend()
            )
            master_key = urlsafe_b64encode(kdf.derive(password.encode()))
            # save master key to file
            with open(self.master_key_path, 'wb') as f:
                f.write(master_key)
            return master_key

    def _load_otp_keys(self):
        """
        Load and decrypt account names and OTP keys from file
        """
        try:
            with open(self.keyfile_path, 'rb') as f:
                encrypted = f.read()
        except FileNotFoundError as exc:
            raise MissingKeyFileError("Missing key file") from exc
        master_key = self._master_key
        if master_key ==  None:
            return None
        fernet = Fernet(master_key)
        try:
            decrypted = fernet.decrypt(encrypted).decode()
        except InvalidToken:
            return None
        return json.loads(decrypted)

    def _save_otp_keys(self):
        datab = json.dumps(self._otp_keys).encode()
        fernet = Fernet(self._get_master_key())
        encrypted = fernet.encrypt(datab)
        with open(KEYFILE_PATH, 'wb') as f:
            f.write(encrypted)

    @property
    def verified(self):
        self._otp_keys = self._load_otp_keys()
        if self._otp_keys or self._otp_keys == {}:
            self._verified = True
        else:
            self._verified = False
        return self._verified

    def get_otp_keys(self):
        if self.verified:
            return self._otp_keys
        else:
            return None

    def verify_with_password(self, password):
        self._master_key = self._get_master_key(password)

    def logout(self):
        os.remove(MASTER_KEY_PATH)

    def create_key_file(self, password):
        self.logout()
        self._otp_keys = {}
        self.verify_with_password(password)
        self._save_otp_keys()

    def get_otps(self):
        otps = {}
        for account, key in self._otp_keys.items():
            missing_padding = len(key) % 8
            if missing_padding != 0:
                key += '=' * (8 - missing_padding)
            try:
                byte_key = b32decode(key, casefold=True)
            except binascii.Error:
                otps[account] = None
                break
            totp = TOTP(
                byte_key,
                6,
                SHA1(),
                30,
                backend=default_backend(),
                enforce_key_length=False
            )
            otp = totp.generate(time()).decode()
            otps[account] = otp
        return otps

    def add_otp_key(self, data):
        self._otp_keys[data["account"]] = data["key"].replace(" ","")
        self._save_otp_keys()

    def del_otp_key(self, account):
        self._otp_keys.pop(account)
        self._save_otp_keys()

    def get_key(self, account):
        """
        Return the TOTP key for the account as plain text
        """
        return self._otp_keys[account]

    def get_qrcode(self, account):
        """
        Return a PIL image of QR code encoding the OTP Auth URI for the account
        """
        uri = f"otpauth://totp/{account}?secret={self._otp_keys[account]}"
        img = qrcode.make(uri)
        return img

class OTPUi(QDialog):
    """
    OTP Manager GUI
    """
    def __init__(self, parent=None):
        super(OTPUi, self).__init__(parent)
        self.setWindowTitle("OTP Manager")
        self._mainLayout = QVBoxLayout()
        self._otpLayout = QGridLayout()
        self._mainLayout.addLayout(self._otpLayout)
        self.logoutBtn = QPushButton()
        self.logoutBtn.setIcon(QIcon(f"{base_path}/icons/sign-out-alt-solid.svg"))
        self.logoutBtn.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.addBtn = QPushButton()
        self.addBtn.setIcon(QIcon(f"{base_path}/icons/plus-square-solid.svg"))
        self.addBtn.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        buttonBox = QDialogButtonBox()
        buttonBox.addButton(self.addBtn, QDialogButtonBox.ActionRole)
        buttonBox.addButton(self.logoutBtn, QDialogButtonBox.ActionRole)
        buttonBox.setCenterButtons(True)
        self._mainLayout.addWidget(buttonBox)
        self.setLayout(self._mainLayout)
        self.rows = {}

    def createRow(self, account):
        accountLabel = QLabel(account, alignment=Qt.AlignLeft)
        otpLabel = QLabel("", alignment=Qt.AlignCenter)
        otpLabel.setTextInteractionFlags(Qt.TextSelectableByMouse)
        showBtn = QPushButton()
        showBtn.setIcon(QIcon(f"{base_path}/icons/qrcode-solid.svg"))
        showBtn.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        deleteBtn = QPushButton()
        deleteBtn.setIcon(QIcon(f"{base_path}/icons/trash-alt-solid.svg"))
        deleteBtn.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        widgets = {
            "accountLabel": accountLabel, "otpLabel": otpLabel,
            "showBtn": showBtn, "deleteBtn": deleteBtn
        }
        self.rows[account] = widgets
        i = len(self.rows)
        for n, widget in enumerate(widgets.values()):
            self._otpLayout.addWidget(widget, i, n)
        return widgets

    def setOTPs(self, data):
        """
        Refresh time-based one-time passwords for all accounts
        """
        for account, otp in data.items():
            try:
                label = self.rows[account]
            except KeyError:
                label = self._createRow(account)
            if otp == None: otp = "Invalid key!"
            label["otpLabel"].setText(otp)

    def getPassword(self):
        """
        Show dialog box to get password from user
        """
        text, ok = QInputDialog.getText(
            self, "OTP Manager", "Enter password:",
            QLineEdit.Password
        )
        if ok:
            return text
        else:
            return False

    def getNewPassword(self):
        """
        Show dialog box to get new password from user
        """
        text, ok = QInputDialog.getText(
            self, "OTP Manager", "Enter new password:",
            QLineEdit.Password
        )
        if ok:
            return text
        else:
            return False

    def getConfirmation(self):
        msg = QMessageBox()
        msg.setText("Are you sure?")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        if msg.exec() == QMessageBox.Ok:
            return True

    def showQRCode(self, qrcode):
        """
        Display OTP key as QR code
        """
        msg = QDialog()
        imageLabel = QLabel()
        qim = ImageQt(qrcode)
        imageLabel.setPixmap(QPixmap.fromImage(qim));
        layout = QVBoxLayout()
        layout.addWidget(imageLabel)
        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok)
        buttonBox.accepted.connect(msg.accept)
        layout.addWidget(buttonBox)
        msg.setLayout(layout)
        msg.exec()

    def showKey(self, key):
        """
        Display OTP key as text
        """
        msg = QMessageBox()
        msg.setText(key)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec()

    def removeAccount(self, account):
        """
        Remove account from UI
        """
        for w in self.rows[account].values():
            self._otpLayout.removeWidget(w)
            w.deleteLater()
        del(self.rows[account])

    def getNewAccount(self):
        """
        Show dialog box to get new account details
        """
        form = addAccountForm()
        if form.exec():
            return {"account": form.account.text(), "key": form.token.text()}
        else:
            return None

class addAccountForm(QDialog):
    def __init__(self, parent=None):
        super(addAccountForm, self).__init__(parent)
        self.setWindowTitle("OTP Manager")
        # Create widgets
        self.accountLabel = QLabel("Account:")
        self.account = QLineEdit()
        self.tokenLabel = QLabel("TOTP key:")
        self.token = QLineEdit()
        buttons = QDialogButtonBox.Ok | QDialogButtonBox.Cancel
        self.buttonBox = QDialogButtonBox(buttons)
        # Connect signals
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        # Create layout and add widgets
        layout = QVBoxLayout()
        layout.addWidget(self.accountLabel)
        layout.addWidget(self.account)
        layout.addWidget(self.tokenLabel)
        layout.addWidget(self.token)
        layout.addWidget(self.buttonBox)
        # Set dialog layout
        self.setLayout(layout)

class OTPCtrl():
    """
    OTP Manager Controller
    """
    def __init__(self, model, view):
        self._model = model
        self._view = view
        # authenticate
        try:
            while not self._model.verified:
                self._model.verify_with_password(self._view.getPassword())
        except MissingKeyFileError:
            new_password = self._view.getNewPassword()
            if new_password:
                # create new key file and encrypt with new password
                self._model.create_key_file(new_password)
            else:
                self._view.close()
        # populate UI with initial data
        for account, key in self._model.get_otp_keys().items():
            self._createRow(account, key)
        self._updateOTPs()
        # connect timer to refresh display
        self._connectTimers()
        # connect signals and slots
        self._view.logoutBtn.clicked.connect(self._logout)
        self._view.addBtn.clicked.connect(self._addAccount)

    def _createRow(self, account, key):
        self._view.createRow(account)
        self._view.rows[account]["showBtn"].clicked.connect(
            partial(self._showQRCode, account))
        self._view.rows[account]["deleteBtn"].clicked.connect(
            partial(self._deleteAccount, account))

    def _updateOTPs(self):
        self._view.setOTPs(self._model.get_otps())

    def _logout(self):
        self._model.logout()
        self._view.close()

    def _addAccount(self):
        new_account = self._view.getNewAccount()
        if new_account:
            self._model.add_otp_key(new_account)
            self._createRow(new_account['account'], new_account['key'])

    def _showQRCode(self, account):
        qrcode = self._model.get_qrcode(account)
        self._view.showQRCode(qrcode)

    def _deleteAccount(self, account):
        if self._view.getConfirmation():
            self._model.del_otp_key(account)
            self._view.removeAccount(account)

    def _connectTimers(self):
        self._timer = QTimer()
        self._timer.timeout.connect(self._updateOTPs)
        self._timer.start(1000)

def main():
    app = QApplication([])
    view = OTPUi()
    view.show()
    model = OTPModel(MASTER_KEY_PATH, KEYFILE_PATH, SALT)
    controller = OTPCtrl(model=model, view=view)
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
